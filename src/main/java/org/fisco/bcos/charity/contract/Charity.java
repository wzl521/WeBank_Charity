package org.fisco.bcos.charity.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.channel.event.filter.EventLogPushWithDecodeCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.FunctionReturnDecoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple1;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tuples.generated.Tuple5;
import org.fisco.bcos.web3j.tuples.generated.Tuple7;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;
import org.fisco.bcos.web3j.tx.txdecode.TransactionDecoder;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
@SuppressWarnings("unchecked")
public class Charity extends Contract {
    public static final String[] BINARY_ARRAY = {"","","5b83811015611e93578082015181840152602081019050611e78565b50505050905090810190601f168015611ec05780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b158015611ee157600080fd5b505af1158015611ef5573d6000803e3d6000fd5b505050506040513d6020811015611f0b57600080fd5b8101908080519060200190929190505050507f17b2d9697512efe465ca13fab6ec92f9e4e0bd0b17f17e5789c132fd27c7b4c760405160405180910390a150505050505050505050565b60606003805480602002602001604051908101604052809291908181526020018280548015611fa357602002820191906000526020600020905b815481526020019060010190808311611f8f575b5050505050905090565b60008060008060006060806060806060600160008c81526020019081526020016000209950611fdf8a60040154614410565b809c50819750829850839950849d5050505050506120008a60040154613bbf565b809550819a50829b50839650849d50505050505089600301546000808c60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254019250508190555089600301546000808c60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201600082825403925050819055508960030154870396506001860395506121248a6004015485858b868c8c611570565b600160008c8152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160009055600482016000905550507f18cbd1efd0de58afbd8678d82b86c2d87229df1cb72bd25fa87afbb0d48d5c5560405160405180910390a15050505050505050505050565b6000806000806121e7615823565b93508373ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561224d57600080fd5b505af1158015612261573d6000803e3d6000fd5b505050506040513d602081101561227757600080fd5b810190808051906020019092919050505092508273ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f7374617475730000000000000000000000000000000000000000000000000000815250602001838103825260098152602001807f63616e63656c6c6564000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561236357600080fd5b505af1158015612377573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156123df57600080fd5b505af11580156123f3573d6000803e3d6000fd5b505050506040513d602081101561240957600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663cd30a1d161244187615912565b6040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260078152602001807f6974656d5f696400000000000000000000000000000000000000000000000000815250602001838103825284818151815260200191508051906020019080838360005b838110156124e45780820151818401526020810190506124c9565b50505050905090810190601f1680156125115780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561253157600080fd5b505af1158015612545573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663bf2b70a161256e87615912565b85856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825285818151815260200191508051906020019080838360005b8381101561263f578082015181840152602081019050612624565b50505050905090810190601f16801561266c5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561268d57600080fd5b505af11580156126a1573d6000803e3d6000fd5b505050506040513d60208110156126b757600080fd5b810190808051906020019092919050505090507f39c8552bca3ed80b273fcb0ed14fe60d16d78313d43f41e96a9d14df8d392811816040518082815260200191505060405180910390a15050505050565b60608060006060806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501848054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128eb5780601f106128c0576101008083540402835291602001916128eb565b820191906000526020600020905b8154815290600101906020018083116128ce57829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129875780601f1061295c57610100808354040283529160200191612987565b820191906000526020600020905b81548152906001019060200180831161296a57829003601f168201915b50505050509350818054806020026020016040519081016040528092919081815260200182805480156129d957602002820191906000526020600020905b8154815260200190600101908083116129c5575b5050505050915080805480602002602001604051908101604052809291908181526020018280548015612a2b57602002820191906000526020600020905b815481526020019060010190808311612a17575b50505050509050945094509450945094509091929394565b60008060008060008060008060009750612a5b615823565b96504233600254604051808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001935050505060405180910390206001900495506002600081548092919060010191905055508673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612b3c57600080fd5b505af1158015612b50573d6000803e3d6000fd5b505050506040513d6020811015612b6657600080fd5b810190808051906020019092919050505094508673ffffffffffffffffffffffffffffffffffffffff1663e8434e39612b9e88615912565b876040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015612c3c578082015181840152602081019050612c21565b50505050905090810190601f168015612c695780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612c8957600080fd5b505af1158015612c9d573d6000803e3d6000fd5b505050506040513d6020811015612cb357600080fd5b810190808051906020019092919050505093508373ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612d2a57600080fd5b505af1158015612d3e573d6000803e3d6000fd5b505050506040513d6020811015612d5457600080fd5b810190808051906020019092919050505092506000831415613a6d578673ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d6020811015612dfe57600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663e942b516612e3688615912565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018060200183810383526007815260","","0000000000000000000000000000028152600401602060405180830381600087803b158015613ea557600080fd5b505af1158015613eb9573d6000803e3d6000fd5b505050506040513d6020811015613ecf57600080fd5b810190808051906020019092919050505060001415613f1f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858585858494509b509b509b509b509b50614400565b8573ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b158015613f8f57600080fd5b505af1158015613fa3573d6000803e3d6000fd5b505050506040513d6020811015613fb957600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600b8152602001807f6465736372697074696f6e000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561406c57600080fd5b505af1158015614080573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156140aa57600080fd5b8101908080516401000000008111156140c257600080fd5b828101905060208101848111156140d857600080fd5b81518560018202830111640100000000821117156140f557600080fd5b505092919050505094508073ffffffffffffffffffffffffffffffffffffffff16633536046a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600f8152602001807f646f6e6174696f6e5f616d6f756e740000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561419f57600080fd5b505af11580156141b3573d6000803e3d6000fd5b505050506040513d60208110156141c957600080fd5b810190808051906020019092919050505093508073ffffffffffffffffffffffffffffffffffffffff16633536046a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600f8152602001807f6e756d5f6f665f646f6e6174696f6e0000000000000000000000000000000000815250602001915050602060405180830381600087803b15801561427c57600080fd5b505af1158015614290573d6000803e3d6000fd5b505050506040513d60208110156142a657600080fd5b810190808051906020019092919050505092508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f7374617475730000000000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b15801561435957600080fd5b505af115801561436d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561439757600080fd5b8101908080516401000000008111156143af57600080fd5b828101905060208101848111156143c557600080fd5b81518560018202830111640100000000821117156143e257600080fd5b505092919050505091506000858585858494509b509b509b509b509b505b5050505050505091939590929450565b600060608060606000806000606080606060008061442c615823565b96508673ffffffffffffffffffffffffffffffffffffffff1663e8434e396144538f615912565b8973ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156144b757600080fd5b505af11580156144cb573d6000803e3d6000fd5b505050506040513d60208110156144e157600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561458f578082015181840152602081019050614574565b50505050905090810190601f1680156145bc5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156145dc57600080fd5b505af11580156145f0573d6000803e3d6000fd5b505050506040513d602081101561460657600080fd5b810190808051906020019092919050505095506040805190810160405280600481526020017f6e756c6c0000000000000000000000000000000000000000000000000000000081525094506040805190810160405280600481526020017f6e756c6c0000000000000000000000000000000000000000000000000000000081525093506040805190810160405280600481526020017f6e756c6c000000000000000000000000000000000000000000000000000000008152509250600091508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561472957600080fd5b505af115801561473d573d6000803e3d6000fd5b505050506040513d602081101561475357600080fd5b8101908080519060200190929190505050600014156147a3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858585858494509b509b509b509b509b50614cda565b8573ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561481357600080fd5b505af1158015614827573d6000803e3d6000fd5b505050506040513d602081101561483d57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600e8152602001807f7075626c69736865725f6e616d65000000000000000000000000000000000000815250602001915050600060405180830381600087803b1580156148f057600080fd5b505af1158015614904573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561492e57600080fd5b81019080805164010000000081111561494657600080fd5b8281019050602081018481111561495c57600080fd5b815185600182028301116401000000008211171561497957600080fd5b505092919050505094508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260098152602001807f6974656d5f6e616d650000000000000000000000000000000000000000000000815250602001915050600060405180830381600087803b158015614a2357600080fd5b505af1158015614a37573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015614a6157600080fd5b810190808051640100000000811115614a7957600080fd5b82810190506020810184811115614a8f57600080fd5b8151856001820283011164010000000082111715614aac57600080fd5b505092919050505093508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260108152602001807f62656e65666963696172795f6e616d6500000000000000000000000000000000815250602001915050600060405180830381600087803b158015614b5657600080fd5b505af1158015614b6a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015614b9457600080fd5b810190808051640100000000811115614bac57600080fd5b82810190506020810184811115614bc257600080fd5b8151856001820283011164010000000082111715614bdf57600080fd5b505092919050505092508073ffffffffffffffffffffffffffffffffffffffff16633536046a6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018281038252600d8152602001807f7461726765745f616d6f756e7400000000000000000000000000000000000000815250602001915050602060405180830381600087803b158015614c8957600080fd5b505af1158015614c9d573d6000803e3d6000fd5b505050506040513d6020811015614cb357600080fd5b810190808051906020019092919050505091506000858585858494509b509b509b509b509b505b5050505050505091939590929450565b6000806000614cf7615823565b92508273ffffffffffffffffffffffffffffffffffffffff1663e8434e39614d1e86615912565b8573ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614d8257600080fd5b505af1158015614d96573d6000803e3d6000fd5b505050506040513d6020811015614dac57600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015614e5a578082015181840152602081019050614e3f565b50505050905090810190601f168015614e875780820380516001836020","036101000a031916815260200191505b509350505050602060405180830381600087803b158015614ea757600080fd5b505af1158015614ebb573d6000803e3d6000fd5b505050506040513d6020811015614ed157600080fd5b810190808051906020019092919050505091508173ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015614f4857600080fd5b505af1158015614f5c573d6000803e3d6000fd5b505050506040513d6020811015614f7257600080fd5b810190808051906020019092919050505060001415614fe7577f44fee1053e298383e1708b990f5db586df1b097834accf5325ebaad86229de6a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518082815260200191505060405180910390a16151be565b8173ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15801561505757600080fd5b505af115801561506b573d6000803e3d6000fd5b505050506040513d602081101561508157600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663e942b5166040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835260068152602001807f7374617475730000000000000000000000000000000000000000000000000000815250602001838103825260098152602001807f617661696c61626c65000000000000000000000000000000000000000000000081525060200192505050600060405180830381600087803b15801561516d57600080fd5b505af1158015615181573d6000803e3d6000fd5b505050507f44fee1053e298383e1708b990f5db586df1b097834accf5325ebaad86229de6a60006040518082815260200191505060405180910390a15b50505050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004019080519060200190615219929190615ae9565b5050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190615272929190615a69565b5050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030190805190602001906152cb929190615a69565b5050565b60606000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050180548060200260200160405190810160405280929190818152602001828054801561535c57602002820191906000526020600020905b815481526020019060010190808311615348575b5050505050905090565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050565b6000806000806000806153c0615823565b93508373ffffffffffffffffffffffffffffffffffffffff1663e8434e396153e789615912565b8673ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561544b57600080fd5b505af115801561545f573d6000803e3d6000fd5b505050506040513d602081101561547557600080fd5b81019080805190602001909291905050506040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b83811015615523578082015181840152602081019050615508565b50505050905090810190601f1680156155505780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561557057600080fd5b505af1158015615584573d6000803e3d6000fd5b505050506040513d602081101561559a57600080fd5b810190808051906020019092919050505092503391508273ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561561457600080fd5b505af1158015615628573d6000803e3d6000fd5b505050506040513d602081101561563e57600080fd5b810190808051906020019092919050505060001415615685577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff828191509550955061581a565b8273ffffffffffffffffffffffffffffffffffffffff1663846719e060006040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156156f557600080fd5b505af1158015615709573d6000803e3d6000fd5b505050506040513d602081101561571f57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663bf40fac16040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260118152602001807f7075626c69736865725f61646472657373000000000000000000000000000000815250602001915050602060405180830381600087803b1580156157d257600080fd5b505af11580156157e6573d6000803e3d6000fd5b505050506040513d60208110156157fc57600080fd5b81019080805190602001909291905050509150600082819150955095505b50505050915091565b600080600061100191508173ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260068152602001807f745f6974656d0000000000000000000000000000000000000000000000000000815250602001915050602060405180830381600087803b1580156158cd57600080fd5b505af11580156158e1573d6000803e3d6000fd5b505050506040513d60208110156158f757600080fd5b81019080805190602001909291905050509050809250505090565b60606000806060600080861415615960576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450615a60565b8593505b60008414151561598a578280600101935050600a8481151561598257fe5b049350615964565b826040519080825280601f01601f1916602001820160405280156159bd5781602001602082028038833980820191505090505b5091506001830390505b600086141515615a5c57600a868115156159dd57fe5b066030017f010000000000000000000000000000000000000000000000000000000000000002828280600190039350815181101515615a1857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86811515615a5457fe5b0495506159c7565b8194505b50505050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10615aaa57805160ff1916838001178555615ad8565b82800160010185558215615ad8579182015b82811115615ad7578251825591602001919060010190615abc565b5b509050615ae59190615b36565b5090565b828054828255906000526020600020908101928215615b25579160200282015b82811115615b24578251825591602001919060010190615b09565b5b509050615b329190615b36565b5090565b615b5891905b80821115615b54576000816000905550600101615b3c565b5090565b905600a165627a7a72305820c95c94f4809fcd3e6e5272c5da1c963a1a785c559bad57612b398e91a672107000296974656d5f6e616d652c207075626c69736865725f616464726573732c207075626c69736865725f6e616d652c2062656e65666963696172795f6e616d652c646f6e6174696f6e5f616d6f756e742c207461726765745f616d6f756e742c206e756d5f6f665f646f6e6174696f6e2c6465736372697074696f6e2c20737461747573"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_money\",\"type\":\"uint256\"},{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwnItemsId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_partItemsId\",\"type\":\"uint256[]\"}],\"name\":\"setpartItemsId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"item_id\",\"type\":\"uint256\"},{\"name\":\"item_name\",\"type\":\"string\"},{\"name\":\"beneficiary_name\",\"type\":\"string\"},{\"name\":\"target_amount\",\"type\":\"uint256\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"donation_amount\",\"type\":\"uint256\"},{\"name\":\"num_of_donation\",\"type\":\"uint256\"}],\"name\":\"updateItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllItemsId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rid\",\"type\":\"uint256\"}],\"name\":\"undoDonate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"item_id\",\"type\":\"uint256\"}],\"name\":\"cancelItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUserInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"item_name\",\"type\":\"string\"},{\"name\":\"beneficiary_name\",\"type\":\"string\"},{\"name\":\"target_amount\",\"type\":\"int256\"},{\"name\":\"description\",\"type\":\"string\"}],\"name\":\"registerItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPhone\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"item_id\",\"type\":\"uint256\"}],\"name\":\"getItem1\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"item_id\",\"type\":\"uint256\"}],\"name\":\"getItem0\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"item_id\",\"type\":\"uint256\"}],\"name\":\"pushItem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ownItemsId\",\"type\":\"uint256[]\"}],\"name\":\"setOwnItemsId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_phone\",\"type\":\"string\"}],\"name\":\"setPhone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getpartItemsId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"setBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"registerUserEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"registerItemEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"updateItemEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"}],\"name\":\"cancelItemEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ret_code\",\"type\":\"int256\"}],\"name\":\"pushItemEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"donateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"undoDonateEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final TransactionDecoder transactionDecoder = new TransactionDecoder(ABI, BINARY);

    public static final String FUNC_DONATE = "donate";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETNAME = "getName";

    public static final String FUNC_REGISTERUSER = "registerUser";

    public static final String FUNC_GETOWNITEMSID = "getOwnItemsId";

    public static final String FUNC_SETPARTITEMSID = "setpartItemsId";

    public static final String FUNC_UPDATEITEM = "updateItem";

    public static final String FUNC_GETALLITEMSID = "getAllItemsId";

    public static final String FUNC_UNDODONATE = "undoDonate";

    public static final String FUNC_CANCELITEM = "cancelItem";

    public static final String FUNC_GETUSERINFO = "getUserInfo";

    public static final String FUNC_REGISTERITEM = "registerItem";

    public static final String FUNC_GETPHONE = "getPhone";

    public static final String FUNC_GETITEM1 = "getItem1";

    public static final String FUNC_GETITEM0 = "getItem0";

    public static final String FUNC_PUSHITEM = "pushItem";

    public static final String FUNC_SETOWNITEMSID = "setOwnItemsId";

    public static final String FUNC_SETNAME = "setName";

    public static final String FUNC_SETPHONE = "setPhone";

    public static final String FUNC_GETPARTITEMSID = "getpartItemsId";

    public static final String FUNC_SETBALANCE = "setBalance";

    public static final Event REGISTERUSEREVENT_EVENT = new Event("registerUserEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REGISTERITEMEVENT_EVENT = new Event("registerItemEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEITEMEVENT_EVENT = new Event("updateItemEvent",
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event CANCELITEMEVENT_EVENT = new Event("cancelItemEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event PUSHITEMEVENT_EVENT = new Event("pushItemEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event DONATEEVENT_EVENT = new Event("donateEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event UNDODONATEEVENT_EVENT = new Event("undoDonateEvent",
            Arrays.<TypeReference<?>>asList());
    ;

    @Deprecated
    protected Charity(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Charity(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Charity(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Charity(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static TransactionDecoder getTransactionDecoder() {
        return transactionDecoder;
    }

    public RemoteCall<TransactionReceipt> donate(BigInteger _money, BigInteger _id) {
        final Function function = new Function(
                FUNC_DONATE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_money),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void donate(BigInteger _money, BigInteger _id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DONATE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_money),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String donateSeq(BigInteger _money, BigInteger _id) {
        final Function function = new Function(
                FUNC_DONATE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_money),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_id)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<BigInteger, BigInteger> getDonateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DONATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
        );
    }

    public RemoteCall<BigInteger> getBalance() {
        final Function function = new Function(FUNC_GETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> getName() {
        final Function function = new Function(FUNC_GETNAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> registerUser(String _name, String _phone) {
        final Function function = new Function(
                FUNC_REGISTERUSER,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerUser(String _name, String _phone, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERUSER,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerUserSeq(String _name, String _phone) {
        final Function function = new Function(
                FUNC_REGISTERUSER,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple2<String, String> getRegisterUserInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERUSER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
        );
    }

    public RemoteCall<List> getOwnItemsId() {
        final Function function = new Function(FUNC_GETOWNITEMSID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setpartItemsId(List<BigInteger> _partItemsId) {
        final Function function = new Function(
                FUNC_SETPARTITEMSID,
                Arrays.<Type>asList(_partItemsId.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_partItemsId, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setpartItemsId(List<BigInteger> _partItemsId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETPARTITEMSID,
                Arrays.<Type>asList(_partItemsId.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_partItemsId, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setpartItemsIdSeq(List<BigInteger> _partItemsId) {
        final Function function = new Function(
                FUNC_SETPARTITEMSID,
                Arrays.<Type>asList(_partItemsId.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_partItemsId, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<BigInteger>> getSetpartItemsIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPARTITEMSID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
        );
    }

    public RemoteCall<TransactionReceipt> updateItem(BigInteger item_id, String item_name, String beneficiary_name, BigInteger target_amount, String description, BigInteger donation_amount, BigInteger num_of_donation) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(item_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(beneficiary_name),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(target_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(donation_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(num_of_donation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateItem(BigInteger item_id, String item_name, String beneficiary_name, BigInteger target_amount, String description, BigInteger donation_amount, BigInteger num_of_donation, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(item_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(beneficiary_name),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(target_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(donation_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(num_of_donation)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String updateItemSeq(BigInteger item_id, String item_name, String beneficiary_name, BigInteger target_amount, String description, BigInteger donation_amount, BigInteger num_of_donation) {
        final Function function = new Function(
                FUNC_UPDATEITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(item_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(beneficiary_name),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(target_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(donation_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(num_of_donation)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple7<BigInteger, String, String, BigInteger, String, BigInteger, BigInteger> getUpdateItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple7<BigInteger, String, String, BigInteger, String, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (BigInteger) results.get(5).getValue(),
                (BigInteger) results.get(6).getValue()
        );
    }

    public RemoteCall<List> getAllItemsId() {
        final Function function = new Function(FUNC_GETALLITEMSID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> undoDonate(BigInteger _rid) {
        final Function function = new Function(
                FUNC_UNDODONATE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_rid)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void undoDonate(BigInteger _rid, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UNDODONATE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_rid)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String undoDonateSeq(BigInteger _rid) {
        final Function function = new Function(
                FUNC_UNDODONATE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_rid)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getUndoDonateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UNDODONATE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> cancelItem(BigInteger item_id) {
        final Function function = new Function(
                FUNC_CANCELITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void cancelItem(BigInteger item_id, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_CANCELITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String cancelItemSeq(BigInteger item_id) {
        final Function function = new Function(
                FUNC_CANCELITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getCancelItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CANCELITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public RemoteCall<Tuple5<String, String, BigInteger, List<BigInteger>, List<BigInteger>>> getUserInfo() {
        final Function function = new Function(FUNC_GETUSERINFO,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple5<String, String, BigInteger, List<BigInteger>, List<BigInteger>>>(
                new Callable<Tuple5<String, String, BigInteger, List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, List<BigInteger>, List<BigInteger>>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                convertToNative((List<Uint256>) results.get(3).getValue()),
                                convertToNative((List<Uint256>) results.get(4).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> registerItem(String item_name, String beneficiary_name, BigInteger target_amount, String description) {
        final Function function = new Function(
                FUNC_REGISTERITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(item_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(beneficiary_name),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(target_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void registerItem(String item_name, String beneficiary_name, BigInteger target_amount, String description, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REGISTERITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(item_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(beneficiary_name),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(target_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String registerItemSeq(String item_name, String beneficiary_name, BigInteger target_amount, String description) {
        final Function function = new Function(
                FUNC_REGISTERITEM,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(item_name),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(beneficiary_name),
                        new org.fisco.bcos.web3j.abi.datatypes.generated.Int256(target_amount),
                        new org.fisco.bcos.web3j.abi.datatypes.Utf8String(description)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple4<String, String, BigInteger, String> getRegisterItemInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTERITEM,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple4<String, String, BigInteger, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (String) results.get(3).getValue()
        );
    }

    public RemoteCall<String> getPhone() {
        final Function function = new Function(FUNC_GETPHONE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple5<BigInteger, String, BigInteger, BigInteger, String>> getItem1(BigInteger item_id) {
        final Function function = new Function(FUNC_GETITEM1,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, BigInteger, BigInteger, String>>(
                new Callable<Tuple5<BigInteger, String, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple5<BigInteger, String, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<BigInteger, String, String, String, BigInteger>> getItem0(BigInteger item_id) {
        final Function function = new Function(FUNC_GETITEM0,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(item_id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<BigInteger, String, String, String, BigInteger>>(
                new Callable<Tuple5<BigInteger, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, String, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public void pushItem(BigInteger item_id) {
        throw new RuntimeException("cannot call constant function with void return type");
    }

    public RemoteCall<TransactionReceipt> setOwnItemsId(List<BigInteger> _ownItemsId) {
        final Function function = new Function(
                FUNC_SETOWNITEMSID,
                Arrays.<Type>asList(_ownItemsId.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_ownItemsId, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setOwnItemsId(List<BigInteger> _ownItemsId, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNITEMSID,
                Arrays.<Type>asList(_ownItemsId.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_ownItemsId, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setOwnItemsIdSeq(List<BigInteger> _ownItemsId) {
        final Function function = new Function(
                FUNC_SETOWNITEMSID,
                Arrays.<Type>asList(_ownItemsId.isEmpty()?org.fisco.bcos.web3j.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.web3j.abi.Utils.typeMap(_ownItemsId, org.fisco.bcos.web3j.abi.datatypes.generated.Uint256.class))),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<List<BigInteger>> getSetOwnItemsIdInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNITEMSID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
        );
    }

    public RemoteCall<TransactionReceipt> setName(String _name) {
        final Function function = new Function(
                FUNC_SETNAME,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setName(String _name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETNAME,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setNameSeq(String _name) {
        final Function function = new Function(
                FUNC_SETNAME,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_name)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetNameInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETNAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public RemoteCall<TransactionReceipt> setPhone(String _phone) {
        final Function function = new Function(
                FUNC_SETPHONE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setPhone(String _phone, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETPHONE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setPhoneSeq(String _phone) {
        final Function function = new Function(
                FUNC_SETPHONE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.Utf8String(_phone)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<String> getSetPhoneInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETPHONE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<String>(

                (String) results.get(0).getValue()
        );
    }

    public RemoteCall<List> getpartItemsId() {
        final Function function = new Function(FUNC_GETPARTITEMSID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> setBalance(BigInteger _balance) {
        final Function function = new Function(
                FUNC_SETBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_balance)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void setBalance(BigInteger _balance, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_SETBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_balance)),
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String setBalanceSeq(BigInteger _balance) {
        final Function function = new Function(
                FUNC_SETBALANCE,
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(_balance)),
                Collections.<TypeReference<?>>emptyList());
        return createTransactionSeq(function);
    }

    public Tuple1<BigInteger> getSetBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBALANCE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());;
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
        );
    }

    public List<RegisterUserEventEventResponse> getRegisterUserEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERUSEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterUserEventEventResponse> responses = new ArrayList<RegisterUserEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterUserEventEventResponse typedResponse = new RegisterUserEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerregisterUserEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTERUSEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerregisterUserEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTERUSEREVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<RegisterItemEventEventResponse> getRegisterItemEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTERITEMEVENT_EVENT, transactionReceipt);
        ArrayList<RegisterItemEventEventResponse> responses = new ArrayList<RegisterItemEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegisterItemEventEventResponse typedResponse = new RegisterItemEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerregisterItemEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTERITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerregisterItemEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(REGISTERITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<UpdateItemEventEventResponse> getUpdateItemEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEITEMEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateItemEventEventResponse> responses = new ArrayList<UpdateItemEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateItemEventEventResponse typedResponse = new UpdateItemEventEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerupdateItemEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UPDATEITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerupdateItemEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UPDATEITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<CancelItemEventEventResponse> getCancelItemEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CANCELITEMEVENT_EVENT, transactionReceipt);
        ArrayList<CancelItemEventEventResponse> responses = new ArrayList<CancelItemEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CancelItemEventEventResponse typedResponse = new CancelItemEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registercancelItemEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CANCELITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registercancelItemEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(CANCELITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<PushItemEventEventResponse> getPushItemEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PUSHITEMEVENT_EVENT, transactionReceipt);
        ArrayList<PushItemEventEventResponse> responses = new ArrayList<PushItemEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PushItemEventEventResponse typedResponse = new PushItemEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ret_code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerpushItemEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PUSHITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerpushItemEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(PUSHITEMEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<DonateEventEventResponse> getDonateEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DONATEEVENT_EVENT, transactionReceipt);
        ArrayList<DonateEventEventResponse> responses = new ArrayList<DonateEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DonateEventEventResponse typedResponse = new DonateEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerdonateEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DONATEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerdonateEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(DONATEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    public List<UndoDonateEventEventResponse> getUndoDonateEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNDODONATEEVENT_EVENT, transactionReceipt);
        ArrayList<UndoDonateEventEventResponse> responses = new ArrayList<UndoDonateEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UndoDonateEventEventResponse typedResponse = new UndoDonateEventEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void registerundoDonateEventEventLogFilter(String fromBlock, String toBlock, List<String> otherTopcs, EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UNDODONATEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,fromBlock,toBlock,otherTopcs,callback);
    }

    public void registerundoDonateEventEventLogFilter(EventLogPushWithDecodeCallback callback) {
        String topic0 = EventEncoder.encode(UNDODONATEEVENT_EVENT);
        registerEventLogPushFilter(ABI,BINARY,topic0,callback);
    }

    @Deprecated
    public static Charity load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Charity(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Charity load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Charity(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Charity load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Charity(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Charity load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Charity(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Charity> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Charity.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<Charity> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Charity.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Charity> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Charity.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Charity> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Charity.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class RegisterUserEventEventResponse {
        public Log log;

        public String sender;
    }

    public static class RegisterItemEventEventResponse {
        public Log log;

        public BigInteger ret_code;

        public BigInteger id;
    }

    public static class UpdateItemEventEventResponse {
        public Log log;
    }

    public static class CancelItemEventEventResponse {
        public Log log;

        public BigInteger ret_code;
    }

    public static class PushItemEventEventResponse {
        public Log log;

        public BigInteger ret_code;
    }

    public static class DonateEventEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class UndoDonateEventEventResponse {
        public Log log;
    }
}